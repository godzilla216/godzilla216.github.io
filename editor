<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Save Editor</title>
</head>
<body>
    <h1>Save Editor</h1>
    <input type="file" id="fileInput">
    <div id="editor" style="display: none;">
        <h2>Edit Save Data</h2>
        <table id="dataTable" border="1">
            <thead>
                <tr id="headerRow"></tr>
            </thead>
            <tbody id="tableBody"></tbody>
        </table>
        <button onclick="saveChanges()">Save Changes</button>
        <a id="downloadLink" style="display: none;">Download Edited Save</a>
        <h3>Copy Edited Save</h3>
        <textarea id="copyText" rows="10" cols="100" style="display: none;"></textarea>
    </div>

    <script>
        let headers = [];
        let rows = [];

        document.getElementById('fileInput').addEventListener('change', loadFile);

        function loadFile(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function() {
                parseData(reader.result);
                displayTable();
            };
            reader.readAsText(file);
        }

        function parseData(data) {
            const lines = data.split('\n');
            headers = lines[0].trim().split('\t');
            rows = lines.slice(1).map(line => line.trim().split('\t'));
        }

        function displayTable() {
            const headerRow = document.getElementById('headerRow');
            headerRow.innerHTML = headers.map(header => `<th>${header}</th>`).join('');

            const tableBody = document.getElementById('tableBody');
            tableBody.innerHTML = rows.map((row, rowIndex) => {
                return `<tr>` + row.map((cell, cellIndex) => {
                    // Check if the cell contains a hex color code in the format $xxxxxx
                    const isHexColor = /^\$([0-9A-Fa-f]{6})$/.test(cell);
                    const inputType = isHexColor ? 'color' : 'text';
                    const value = isHexColor ? `#${cell.slice(1)}` : cell; // Convert $xxxxxx to #xxxxxx

                    return `<td><input type="${inputType}" value="${value}" data-row="${rowIndex}" data-col="${cellIndex}"></td>`;
                }).join('') + `</tr>`;
            }).join('');

            document.getElementById('editor').style.display = 'block';
        }

        function saveChanges() {
            // Update rows array with input values
            const inputs = document.querySelectorAll('td input');
            inputs.forEach(input => {
                const row = input.getAttribute('data-row');
                const col = input.getAttribute('data-col');
                let value = input.value;

                // Convert color picker value (#xxxxxx) back to the original format ($xxxxxx)
                if (input.type === 'color') {
                    value = `$${value.slice(1)}`; // Replace # with $
                }

                rows[row][col] = value;
            });

            // Convert headers and rows back to text
            const outputText = headers.join('\t') + '\n' + rows.map(row => row.join('\t')).join('\n');

            // Display the edited data in a textarea for copying
            const copyTextArea = document.getElementById('copyText');
            copyTextArea.value = outputText;
            copyTextArea.style.display = 'block';

            // Create a blob for download
            const blob = new Blob([outputText], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);

            // Update download link and make it visible
            const downloadLink = document.getElementById('downloadLink');
            downloadLink.href = url;
            downloadLink.download = 'edited_save.txt';
            downloadLink.style.display = 'inline';
            downloadLink.textContent = 'Download Edited Save';
        }
    </script>
</body>
</html>
